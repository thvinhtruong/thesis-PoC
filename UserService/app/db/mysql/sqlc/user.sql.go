// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO User (fullname, email, gender, datecreated)
VALUES(?, ? , ?, NOW())
`

type CreateUserParams struct {
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
	Gender   string `json:"gender"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Fullname, arg.Email, arg.Gender)
}

const createUserPassword = `-- name: CreateUserPassword :exec
INSERT INTO User_Password (user_id, password) VALUES(?, ?)
`

type CreateUserPasswordParams struct {
	UserID   int32  `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) CreateUserPassword(ctx context.Context, arg CreateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, createUserPassword, arg.UserID, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM User WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserPassword = `-- name: DeleteUserPassword :exec
DELETE FROM User_Password WHERE user_id = ?
`

func (q *Queries) DeleteUserPassword(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserPassword, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, student_id, fullname, gender, email, datecreated, dateupdated FROM User WHERE id = ? LIMIT 1 FOR UPDATE
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Fullname,
		&i.Gender,
		&i.Email,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, student_id, fullname, gender, email, datecreated, dateupdated FROM User WHERE email = ? LIMIT 1 FOR UPDATE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Fullname,
		&i.Gender,
		&i.Email,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT id, user_id, password FROM User_Password WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUserPassword(ctx context.Context, userID int32) (UserPassword, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, userID)
	var i UserPassword
	err := row.Scan(&i.ID, &i.UserID, &i.Password)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, student_id, fullname, gender, email, datecreated, dateupdated FROM User ORDER BY id FOR UPDATE
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.Fullname,
			&i.Gender,
			&i.Email,
			&i.Datecreated,
			&i.Dateupdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE User SET fullname = ?, email = ?, gender = ?, dateupdated = NOW()
WHERE id = ?
`

type UpdateUserInfoParams struct {
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
	Gender   string `json:"gender"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.Fullname,
		arg.Email,
		arg.Gender,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE User_Password SET password = ? WHERE user_id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.UserID)
	return err
}
